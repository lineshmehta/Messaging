package com.telenor.cos.messaging.event;

import java.io.Serializable;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

public abstract class Event implements Serializable {

    private static final long serialVersionUID = -1L;

    public enum ACTION {
        CREATED, UPDATED, CHANGE_ACCOUNT, LOGICAL_DELETE, EXPIRED, NAME_CHANGE, ADRESS_CHANGE, DELETE,
        USER_CHANGE, TYPE_CHANGE, STATUS_CHANGE, SHORT_NUMBER, STATUS_UPDATE, SECRET_NUMBER,
        INVOICE_FORMAT_CHANGE, PAYER_CHANGE, OWNER_CHANGE, PAYMENT_STATUS_CHANGE, CONTENT_INHERIT_UPDATE, STRUCTURE_INHERIT_UPDATE, TYPE_ID_UPDATE, TYPE_ID_KEY_UPDATE, USERREF_DESC_CHG,
        INVOICE_CHANGE, RESOURCE_ID_CHANGE, CS_USERID_CHANGE
    }

    public enum TYPE {
        CUSTOMER, SUBSCRIPTION, SUBSCRIPTION_EQUIPMENT, ACCOUNT, AGREEMENT,
        MASTERCUSTOMER, MASTERSTRUCTURE, USERRESOURCE, CSUSER, USERMAPPING, RESOURCE, MOBILE_OFFER, USER_REFERENCE, AGREEMENT_MEMBER,
        AGREEMENT_OWNER
    }

    private Long domainId;
    private String eventId;
    private ACTION action;
    private TYPE type;

    /**
     * Constructor for Event
     *
     * @param domainId the domainId
     * @param action the action
     * @param type the type
     */
    protected Event(Long domainId, ACTION action, TYPE type) {
        this.domainId = domainId;
        this.action = action;
        this.type = type;
    }

    /**
     * Default constructor
     */
    protected Event() {
    }

    /**
     * This returns the unique Event Id generated by the Replication
     * Server and present in each incoming each message.
     * It uniquely identifies a Replication Server Event.
     * @return eventId
     */
    public String getEventId() {
        return eventId;
    }

    /**
     * This sets the unique Event Id which is present in each incoming each message.
     * It uniquely identifies a (Replication Server) Event.
     * @param eventId - the eventId to be set
     */
    public void setEventId(String eventId) {
        this.eventId = eventId;
    }

    /**
     * This returns the unique or primary key id for the
     * given type of event or data object.
     * For example:
     * For Account related events, it will return the Account Id
     * For Subscription related events, it will return the Subscription Id
     * @return domainId
     */
    public Long getDomainId() {
        return domainId;
    }

    public ACTION getAction() {
        return action;
    }

    public TYPE getType() {
        return type;
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)
                .append("Domain Id", domainId)
                .append("Event Id", eventId)
                .toString();
    }
}